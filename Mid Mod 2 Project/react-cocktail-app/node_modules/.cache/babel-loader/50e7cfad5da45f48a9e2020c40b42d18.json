{"ast":null,"code":"var _jsxFileName = \"/Users/emilynunes/Desktop/PerScholas/react-cocktail-app/setup/src/context.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useCallback } from 'react';\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\n/*creates a Context object*/\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  /*loading state value*/\n  const [loading, setLoading] = useState(true);\n  /*whatever the user types in the input, it will search for the specific drink*/\n\n  const [searchTerm, setSearchTerm] = useState('a');\n  /*setCocktail function???????????????????? */\n\n  const [cocktails, setCocktails] = useState([]);\n  /*every time a user types it'll be fetching the drink and setLoading will run as well*/\n\n  const fetchDrinks = async () => {\n    setLoading(true);\n\n    try {} catch (error) {\n      console.log(error);\n    }\n  };\n  /*provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. ??????????????*/\n\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      cocktails,\n      setSearchTerm\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }\n  }, children);\n}; // make sure use\n\n/* Rendering SearchForm && CocktailList and grab those values through GlobalContext and then pass the AppContext so in both components you can access the values ????????????*/\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/emilynunes/Desktop/PerScholas/react-cocktail-app/setup/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","cocktails","setCocktails","fetchDrinks","error","console","log","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,GAAG,GAAG,2DAAZ;AACA;;AACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AAEA;;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA6BZ,QAAQ,CAAC,GAAD,CAA3C;AAEA;;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AAEA;;AACA,QAAMe,WAAW,GAAG,YAAY;AAC9BL,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI,CACH,CADD,CACE,OAAOM,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAND;AAQA;;;AACA,sBAAO,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AACjCP,MAAAA,OADiC;AAEjCI,MAAAA,SAFiC;AAGjCD,MAAAA;AAHiC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMJJ,QANI,CAAP;AAQD,CA5BD,C,CA6BA;;AACA;;;AACA,OAAO,MAAMW,gBAAgB,GAAG,MAAM;AACpC,SAAOlB,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useCallback } from 'react'\n\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s='\n/*creates a Context object*/\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n  /*loading state value*/\n  const [loading, setLoading] = useState(true);\n  \n  /*whatever the user types in the input, it will search for the specific drink*/\n  const [searchTerm, setSearchTerm] =useState('a');\n\n  /*setCocktail function???????????????????? */\n  const [cocktails, setCocktails] = useState([]);\n  \n  /*every time a user types it'll be fetching the drink and setLoading will run as well*/\n  const fetchDrinks = async () => {\n    setLoading(true)\n    try {\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  /*provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. ??????????????*/\n  return <AppContext.Provider value={{\n    loading,  \n    cocktails,\n    setSearchTerm,\n  }}\n  >\n    {children}\n    </AppContext.Provider>\n}\n// make sure use\n/* Rendering SearchForm && CocktailList and grab those values through GlobalContext and then pass the AppContext so in both components you can access the values ????????????*/\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n"]},"metadata":{},"sourceType":"module"}