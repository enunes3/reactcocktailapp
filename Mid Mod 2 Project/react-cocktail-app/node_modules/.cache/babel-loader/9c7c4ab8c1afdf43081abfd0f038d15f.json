{"ast":null,"code":"var _jsxFileName = \"/Users/emilynunes/Desktop/PerScholas/react-cocktail-app/setup/src/context.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useCallback } from 'react';\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s=';\n/*creates a Context object*/\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  /*loading state value*/\n  const [loading, setLoading] = useState(true);\n  /*whatever the user types in the input, it will search for the specific drink*/\n\n  /*put the value as 'a' because drinks will already load as the user is inputing a value */\n\n  const [searchTerm, setSearchTerm] = useState('a');\n  /*setCocktail function???????????????????? */\n\n  const [cocktails, setCocktails] = useState([]);\n  /*every time a user types in the input, it'll be fetching the drink and setLoading will run as well*/\n\n  const fetchDrinks = useCallback(async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const {\n        drinks\n      } = data;\n\n      if (drinks) {\n        const newCocktail = drinks.map(item => {\n          const {\n            idDrink,\n            strDrink,\n            strDrinkThumb,\n            strAlcoholic,\n            strGlass\n          } = item;\n          return {\n            id: idDrink,\n            name: strDrink,\n            image: strDrinkThumb,\n            info: strAlcoholic,\n            glass: strGlass\n          };\n        });\n        setCocktails(newCocktail);\n      } else {\n        setCocktails([]);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  }, [searchTerm]);\n  /* */\n\n  useEffect(() => {\n    fetchDrinks();\n  }, [searchTerm]);\n  /*provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. ??????????????*/\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      cocktails,\n      setSearchTerm\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }\n  }, children);\n}; // make sure use\n\n/* Rendering SearchForm && CocktailList and grab those values through GlobalContext and then pass the AppContext so in both components you can access the values ????????????*/\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/emilynunes/Desktop/PerScholas/react-cocktail-app/setup/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","cocktails","setCocktails","fetchDrinks","response","fetch","data","json","drinks","newCocktail","map","item","idDrink","strDrink","strDrinkThumb","strAlcoholic","strGlass","id","name","image","info","glass","error","console","log","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,GAAG,GAAG,2DAAZ;AACA;;AACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AAEA;;AACA;;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA6BZ,QAAQ,CAAC,GAAD,CAA3C;AAEA;;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AAEA;;AACA,QAAMe,WAAW,GAAGZ,WAAW,CAAC,YAAY;AAC1CO,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEb,GAAI,GAAEO,UAAW,EAArB,CAA5B;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAM;AAACC,QAAAA;AAAD,UAAWF,IAAjB;;AACA,UAAGE,MAAH,EAAU;AACR,cAAMC,WAAW,GAAGD,MAAM,CAACE,GAAP,CAAYC,IAAD,IAAS;AACtC,gBAAM;AACJC,YAAAA,OADI;AAEJC,YAAAA,QAFI;AAGJC,YAAAA,aAHI;AAIJC,YAAAA,YAJI;AAKJC,YAAAA;AALI,cAMFL,IANJ;AAOA,iBAAO;AACLM,YAAAA,EAAE,EAACL,OADE;AAELM,YAAAA,IAAI,EAACL,QAFA;AAGLM,YAAAA,KAAK,EAACL,aAHD;AAILM,YAAAA,IAAI,EAACL,YAJA;AAKLM,YAAAA,KAAK,EAACL;AALD,WAAP;AAMD,SAdmB,CAApB;AAeAd,QAAAA,YAAY,CAACO,WAAD,CAAZ;AACD,OAjBD,MAkBK;AACHP,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;;AACDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KA1BD,CA0BE,OAAOwB,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAxB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAhC8B,EAgC5B,CAACC,UAAD,CAhC4B,CAA/B;AAiCA;;AACAT,EAAAA,SAAS,CAAC,MAAK;AACjBa,IAAAA,WAAW;AACR,GAFQ,EAEP,CAACJ,UAAD,CAFO,CAAT;AAIA;;AACA,sBAAO,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AACjCF,MAAAA,OADiC;AAEjCI,MAAAA,SAFiC;AAGjCD,MAAAA;AAHiC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMJJ,QANI,CAAP;AAQD,CA3DD,C,CA4DA;;AACA;;;AACA,OAAO,MAAM6B,gBAAgB,GAAG,MAAM;AACpC,SAAOpC,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from 'react'\nimport { useCallback } from 'react'\n\nconst url = 'https://www.thecocktaildb.com/api/json/v1/1/search.php?s='\n/*creates a Context object*/\nconst AppContext = React.createContext()\n\nconst AppProvider = ({ children }) => {\n  /*loading state value*/\n  const [loading, setLoading] = useState(true);\n  \n  /*whatever the user types in the input, it will search for the specific drink*/\n  /*put the value as 'a' because drinks will already load as the user is inputing a value */\n  const [searchTerm, setSearchTerm] =useState('a');\n\n  /*setCocktail function???????????????????? */\n  const [cocktails, setCocktails] = useState([]);\n  \n  /*every time a user types in the input, it'll be fetching the drink and setLoading will run as well*/\n  const fetchDrinks = useCallback(async () => {\n    setLoading(true)\n    try {\n      const response = await fetch(`${url}${searchTerm}`)\n      const data = await response.json();\n      const {drinks} = data;\n      if(drinks){\n        const newCocktail = drinks.map((item) =>{\n          const {\n            idDrink, \n            strDrink, \n            strDrinkThumb, \n            strAlcoholic, \n            strGlass\n          } = item;\n          return {\n            id:idDrink, \n            name:strDrink,\n            image:strDrinkThumb, \n            info:strAlcoholic, \n            glass:strGlass}\n        })\n        setCocktails(newCocktail)\n      }\n      else {\n        setCocktails([])\n      }\n      setLoading(false)\n    } catch (error) {\n      console.log(error)\n      setLoading(false)\n    }\n  }, [searchTerm])\n  /* */\n  useEffect(()=> {\nfetchDrinks()\n  },[searchTerm])\n\n  /*provider component accepts a value prop to be passed to consuming components that are descendants of this Provider. ??????????????*/\n  return <AppContext.Provider value={{\n    loading,  \n    cocktails,\n    setSearchTerm,\n  }}\n  >\n    {children}\n    </AppContext.Provider>\n}\n// make sure use\n/* Rendering SearchForm && CocktailList and grab those values through GlobalContext and then pass the AppContext so in both components you can access the values ????????????*/\nexport const useGlobalContext = () => {\n  return useContext(AppContext)\n}\n\nexport { AppContext, AppProvider }\n"]},"metadata":{},"sourceType":"module"}